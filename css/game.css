.junk-pile {
  position: fixed;
  text-align: center;
  bottom: 5%;
  left: 0;
  padding: var(--gap);
  border-radius: var(--bd-radius);
  opacity: 0.9;
}

.draw-animation {
  position: absolute;
  animation-timing-function: linear;
  animation: drawCard 1.5s;
}

.slots,
.events,
.tray {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  gap: var(--gap);
  margin-left: auto;
  margin-right: auto;
}

.slots {
  max-width: calc(var(--card-width) * 3 + calc(var(--gap) * 2) + calc(var(--card-padding) * 20));
}

.events {
  width: var(--card-width);
}

.event-number {
  pointer-events: none; /* Pass events to the card underneath */
  position: absolute;
  width: 100%;
  text-align: left;
  z-index: 2;
}
.event-number img {
  opacity: 0.75;
  width: 35%; /* Loosely scale to our card */
}

.my-events {
  top: 50%;
  right: 20%;
  background: var(--bg-accent);
}

.opponent-events {
  top: 5%;
  left: 20%;
  transform: rotate(180deg);
  background: var(--bg-danger);
}

.my-slots {
  border-top: 5px solid black;
  background: linear-gradient(180deg, var(--bg-accent) 0, transparent 50%);
  padding-top: 10px;
}

.opponent-slots {
  background: linear-gradient(180deg, var(--bg-danger) 0, transparent 50%);
}

.opponent-slots,
.opponent-camps {
  /* Cutesey approach to keep the grid maintained in terms of indexes. Otherwise if we reverse in game.js -> getSlots -> getOpponentSlots when a WS push comes in we update the wrong index (as for example index 4 has become index 1) */
  transform: rotate(180deg);
  padding-top: 10px; /* With the rotation this is actually...bottom */
}

.opponent-camps {
  /* TODO Determine how high up we want the opponent camps - is just the name enough and they can mouseover? Or do we want the full card? */
  margin-top: calc(var(--card-height) * -1);
  display: flex;
  gap: var(--gap);
}

.opponent-camps > div {
  padding: var(--card-padding);
  /* TODO This approach for trying to show the whole card works well with Hover Scale > 100% but falls apart otherwise: `transform-origin: top center;` */
}

.opponent-camps:hover {
  position: relative;
  z-index: 3999; /* Put hovered opponent camps above other cards in the slots */
}

.count-panel,
.opponent-card-count,
.deck-card-count,
.discard-card-count {
  position: absolute;
  padding: 5px;
  opacity: 0.9;
  text-align: center;
  white-space: pre-line;
  font-size: smaller;
  z-index: 1;
}

.deck-card-count,
.discard-card-count {
  left: -2px;
  right: -2px;
  margin-left: auto;
  margin-right: auto;
}

.opponent-card-count {
  /* Will put in the bottom right with the rotation */
  left: 0;
  top: 5%;
  transform: rotate(180deg);
}

.deck-card-count {
  top: -10px;
}

.discard-card-count {
  bottom: -10px;
}

.tray-subtext {
  font-size: 10px;
}

.tray {
  width: fit-content;
  min-width: calc(var(--card-width) * 3 + calc(var(--gap) * 2) + calc(var(--card-padding) * 20));
  max-width: calc(100% - var(--flip-tray-button-size));
  margin-top: var(--gap);
}

.flip-tray {
  position: fixed;
  right: 0;
  bottom: 5%;
  width: var(--flip-tray-button-size);
  height: var(--flip-tray-button-size);
  background-color: var(--bg-default);
  opacity: 0.9;
}

.card-size,
.slots div,
.events div {
  width: var(--card-width);
  height: var(--card-height);
}

.slots .slot-wrap {
  text-align: center;
  vertical-align: middle;
  padding: var(--card-padding);
}

.camp-choice:hover,
.card-anim:hover {
  box-shadow: 0 0 20px var(--accent);
}

.card-anim:hover {
  filter: none !important; /* Remove any coloring for damaged/unready when hovering to read */
  animation: tiltCard 2s infinite alternate
    ease-in-out; /* TODO Surprisingly can be a performance hit - add an optional basic static `transform: scale(var(--hover-scale);` as a Setting instead */
  backface-visibility: hidden;
  transform-style: preserve-3d;
}

.card-hand:hover {
  /* Raise our card up from our hand on hover */
  transform-origin: bottom center;
}

.card-error {
  background-color: var(--bg-danger);
}

.slot-highlight {
  background-color: var(--success);
}

.damaged-card {
  transform: rotate(90deg);
}

.water-wrap {
  left: 2%;
  bottom: 5%;
  display: flex;
  gap: 5px;
  line-height: 1;
}

.water-token {
  max-width: var(--water-token-size);
}

.water-token-overlay {
  position: absolute;
  z-index: 1;
  max-width: 50px;
}

.water-token-cost {
  filter: brightness(50%) sepia(1) hue-rotate(-50deg) saturate(5) contrast(1.2);
}

.water-token:hover {
  filter: drop-shadow(2px 2px white);
  animation: tiltToken 2s infinite alternate ease-in-out;
}

.three-card-dialog,
.three-card-dialog > div:first-of-type {
  min-width: calc(var(--card-width-full) * 3 + 200px);
  text-align: center;
}

.four-card-dialog,
.four-card-dialog > div:first-of-type {
  min-width: calc(var(--card-width-full) * 4 + 200px);
  text-align: center;
}

.camps-dialog {
  text-align: center;
}

.three-card-choice-wrap {
  display: inline-block;
  margin: 0 5px 0 5px;
}

.card-choice {
  filter: saturate(50%);
}

.card-choice:hover {
  outline: 5px outset var(--success);
}

.card-choice-sel {
  outline: 5px solid var(--success);
  filter: brightness(120%) saturate(100%);
}

.chat-game {
  top: 5%;
  right: 2%;
  max-width: 20vw;
}

.chat-wrap {
  word-break: break-word;
}

.target-mode-help {
  position: fixed;
  top: 5px;
  left: 5px;
  max-width: 25%;
  text-align: center;
  z-index: 9999;
  background-color: var(--target-mode-bg);
  color: var(--target-mode-fg);
  box-shadow: 5px 5px 5px var(--target-mode);
  padding: 20px 40px 20px 40px;
  opacity: 0.9;
}

.target-mode-section {
  box-shadow: 0 0 50px var(--target-mode) inset;
  cursor: crosshair;
}

.target-mode-section-damageCard {
  cursor: url('../images/cursors/cursor-damage.png') 0 0, crosshair;
}
.target-mode-section-destroyCard {
  cursor: url('../images/cursors/cursor-destroy.png') 0 0, crosshair;
}
.target-mode-section-injurePerson {
  cursor: url('../images/cursors/cursor-injure.png') 0 0, crosshair;
}
.target-mode-section-restoreCard {
  cursor: url('../images/cursors/cursor-restore.png') 0 0, crosshair;
  box-shadow: 0 0 50px var(--success) inset;
}
.target-mode-section-gainPunk {
  cursor: url('../images/cursors/cursor-punk.png') 0 0, crosshair;
  box-shadow: 0 0 50px var(--variant) inset;
}

.invalid-target,
.unready-card,
.unready-card:hover {
  filter: saturate(30%) brightness(30%);
}

.invalid-target {
  pointer-events: none;
}

.valid-target {
  filter: saturate(110%) brightness(110%);
  background-color: var(--bg-success);
}

.valid-target:hover {
  background-color: var(--success);
}

.valid-target-selected {
  outline: 10px solid var(--active);
}

.flip-tray-click {
  transition: transform 0.3s linear;
  transform: rotateY(360deg);
}

.take-water-silo {
  position: absolute;
  top: calc(50% - var(--card-height) / 4);
  right: calc(var(--card-width) / -1.5);
}

.take-water-silo img {
  width: calc(var(--card-width) / 2);
  height: calc(var(--card-height) / 2);
}

.mutant-dialog-wrap > label {
  font-size: x-large;
}

.time-wrap {
  position: fixed;
  bottom: 0;
  left: 0;
  padding: 5px;
  border-top-right-radius: var(--bd-radius);
  border-left: 0;
  border-bottom: 0;
  z-index: 10;
}
